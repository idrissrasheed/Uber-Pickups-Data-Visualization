library(ggplot2)
library(ggthemes)
library(dplyr)
library(tidyr)
library(lubridate)
library(DT)
library(scales)

#Import data
april = read.csv("uber-raw-data-apr14.csv")
may = read.csv("uber-raw-data-may14.csv")
june = read.csv("uber-raw-data-jun14.csv")
july = read.csv("uber-raw-data-jul14.csv")
aug = read.csv("uber-raw-data-aug14.csv")
sept = read.csv("uber-raw-data-sep14.csv")

#Combining separate datasets into one
uber = rbind(april, may, june, july, aug, sept)

#Converting variable types into categorical data
uber$Date.Time = as.POSIXct(uber$Date.Time, format = "%m/%d/%Y %H:%M:%S")

uber$Time = format(as.POSIXct(uber$Date.Time, format = "%m/%d/%Y %H:%M:%S"), format="%H:%M:%S")

uber$Date.Time = ymd_hms(uber$Date.Time)

#Adding new columns 
uber$day = factor(day(uber$Date.Time))
uber$month = factor(month(uber$Date.Time, label = TRUE))
uber$year = factor(year(uber$Date.Time))
uber$weekday = factor(wday(uber$Date.Time, label = TRUE))
uber$hour = factor(hour(hms(uber$Time)))
uber$minute = factor(minute(hms(uber$Time)))
uber$second = factor(second(hms(uber$Time)))

hour = uber %>%
           group_by(hour) %>%
               dplyr::summarize(total = n()) 
datatable(hour)

ggplot(hour, aes(hour, total)) + 
        geom_bar( stat = "identity", fill = "blue", color = "red") +
           ggtitle("Pickups by Hour") +
            theme(legend.position = "none") +
            scale_y_continuous(labels = comma)

month_hour = uber %>%
          group_by(month, hour) %>%
             dplyr::summarize(total = n())
datatable(month_hour)

ggplot(month_hour, aes(hour, total, fill = month)) +
       geom_bar( stat = "identity") +
          ggtitle("Pickups by Hour and Month") +
           scale_y_continuous(labels = comma)

day = uber %>%
          group_by(day) %>%
             dplyr::summarize(total = n()) 
datatable(day)

ggplot(day, aes(day, total)) + 
        geom_bar( stat = "identity", fill = "blue") +
           ggtitle("Pickups Every Day") +
            theme(legend.position = "none") +
            scale_y_continuous(labels = comma)

#count frequency of daily pickups for every month 
daymonth = uber %>%
          group_by(month, day, weekday) %>%
             dplyr::summarize(total = n())
datatable(daymonth)

ggplot(daymonth, aes(month, total, fill = weekday)) + 
        geom_bar( stat = "identity", position = "dodge") +
           ggtitle("Pickups by Day and Month") +
            scale_y_continuous(labels = comma) +
            scale_fill_manual(values = c("limegreen", "magenta", "slategray3", "blue4", "olivedrab", "hotpink", "red"))

ggplot(uber, aes(Base)) + 
 geom_bar(fill = "tomato") +
 scale_y_continuous(labels = comma) +
 ggtitle("Pickups by Bases")
```

ggplot(uber, aes(Base, fill = weekday)) + 
 geom_bar(position = "dodge") +
 scale_y_continuous(labels = comma) +
 ggtitle("Pickups by Bases and Weekday") +
 scale_fill_manual(values = c("limegreen", "magenta", "slategray3", "blue4", "olivedrab", "hotpink", "red"))

#remove missing values for mapping
uber_na = na.omit(uber)

#set min and max for latitude and longitude for mapping
minLat = min(uber_na$Lat)
maxLat = max(uber_na$Lat)
minLong = min(uber_na$Lon)
maxLong = max(uber_na$Lon)

ggplot(uber,aes(x=Lon,y=Lat,color=Base))+
  geom_point(size=1)+
  scale_x_continuous(limits = c(minLong,maxLong))+
  scale_y_continuous(limits = c(minLat,maxLat))+
  theme_map()+
  ggtitle("Map of Uber Pickups by Bases from April 2014 to September 2014 in New York")
